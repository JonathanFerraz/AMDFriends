"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnProcess = exports.walkDirectory = exports.walkDirectoryOld = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const child_process_1 = require("child_process");
function walkDirectoryOld(dir, fileTypes, exclude) {
    const result = [];
    function __walk(currentPath) {
        const files = fs_1.readdirSync(currentPath);
        for (const i in files) {
            const curFile = path_1.resolve(currentPath, files[i]);
            const _stat = fs_1.statSync(curFile);
            if (_stat.isFile() && fileTypes.includes(path_1.extname(curFile)) && !exclude.includes(path_1.basename(curFile)))
                result.push(curFile);
            else if (_stat.isDirectory())
                __walk(curFile);
        }
    }
    __walk(dir);
    return result;
}
exports.walkDirectoryOld = walkDirectoryOld;
function walkDirectory(dir, fileTypes, exclude) {
    const result = [];
    const files = fs_1.readdirSync(dir, { withFileTypes: true });
    for (const dirent of files) {
        dirent.name = path_1.resolve(dir, dirent.name);
        if (dirent.isFile() && fileTypes.includes(path_1.extname(dirent.name)) && !exclude.includes(path_1.basename(dirent.name)))
            result.push(dirent);
        else if (dirent.isDirectory())
            result.push(...walkDirectory(dirent.name, fileTypes, exclude));
    }
    return result;
}
exports.walkDirectory = walkDirectory;
function spawnProcess(command, args) {
    return new Promise((resolve, reject) => {
        const spawnedProcess = child_process_1.spawn(command, args, { stdio: "inherit" });
        spawnedProcess.on("exit", code => {
            if (code)
                reject(code);
            resolve(code);
        });
    });
}
exports.spawnProcess = spawnProcess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkJBQW1EO0FBQ25ELCtCQUFrRDtBQUNsRCxpREFBc0M7QUFFdEMsU0FBZ0IsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLFNBQW1CLEVBQUUsT0FBaUI7SUFDbkYsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBRTVCLFNBQVMsTUFBTSxDQUFDLFdBQVc7UUFDMUIsTUFBTSxLQUFLLEdBQUcsZ0JBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRTtZQUN0QixNQUFNLE9BQU8sR0FBRyxjQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sS0FBSyxHQUFHLGFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2pHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ2pCLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtnQkFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pCO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNaLE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQWpCRCw0Q0FpQkM7QUFFRCxTQUFnQixhQUFhLENBQUMsR0FBVyxFQUFFLFNBQW1CLEVBQUUsT0FBaUI7SUFDaEYsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLE1BQU0sS0FBSyxHQUFHLGdCQUFXLENBQUMsR0FBRyxFQUFFLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFeEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxLQUFLLEVBQUU7UUFDM0IsTUFBTSxDQUFDLElBQUksR0FBRyxjQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2hCLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDaEU7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFkRCxzQ0FjQztBQUVELFNBQWdCLFlBQVksQ0FBQyxPQUFlLEVBQUUsSUFBYztJQUMzRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3RDLE1BQU0sY0FBYyxHQUFHLHFCQUFLLENBQzNCLE9BQU8sRUFDUCxJQUFJLEVBQ0osRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQ3BCLENBQUM7UUFFRixjQUFjLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNoQyxJQUFJLElBQUk7Z0JBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFmRCxvQ0FlQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVudCwgcmVhZGRpclN5bmMsIHN0YXRTeW5jIH0gZnJvbSBcImZzXCI7XG5pbXBvcnQgeyByZXNvbHZlLCBleHRuYW1lLCBiYXNlbmFtZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBzcGF3biB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWxrRGlyZWN0b3J5T2xkKGRpcjogc3RyaW5nLCBmaWxlVHlwZXM6IHN0cmluZ1tdLCBleGNsdWRlOiBzdHJpbmdbXSk6IHN0cmluZ1tde1xuXHRjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG5cblx0ZnVuY3Rpb24gX193YWxrKGN1cnJlbnRQYXRoKSB7XG5cdFx0Y29uc3QgZmlsZXMgPSByZWFkZGlyU3luYyhjdXJyZW50UGF0aCk7XG5cdFx0Zm9yIChjb25zdCBpIGluIGZpbGVzKSB7XG5cdFx0XHRjb25zdCBjdXJGaWxlID0gcmVzb2x2ZShjdXJyZW50UGF0aCwgZmlsZXNbaV0pO1xuXHRcdFx0Y29uc3QgX3N0YXQgPSBzdGF0U3luYyhjdXJGaWxlKTtcblx0XHRcdGlmIChfc3RhdC5pc0ZpbGUoKSAmJiBmaWxlVHlwZXMuaW5jbHVkZXMoZXh0bmFtZShjdXJGaWxlKSkgJiYgIWV4Y2x1ZGUuaW5jbHVkZXMoYmFzZW5hbWUoY3VyRmlsZSkpKVxuXHRcdFx0XHRyZXN1bHQucHVzaChjdXJGaWxlKTtcblx0XHRcdGVsc2UgaWYgKF9zdGF0LmlzRGlyZWN0b3J5KCkpXG5cdFx0XHRcdF9fd2FsayhjdXJGaWxlKTtcblx0XHR9XG5cdH1cblxuXHRfX3dhbGsoZGlyKTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhbGtEaXJlY3RvcnkoZGlyOiBzdHJpbmcsIGZpbGVUeXBlczogc3RyaW5nW10sIGV4Y2x1ZGU6IHN0cmluZ1tdKTogRGlyZW50W10ge1xuXHRjb25zdCByZXN1bHQ6IERpcmVudFtdID0gW107XG5cdGNvbnN0IGZpbGVzID0gcmVhZGRpclN5bmMoZGlyLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG5cblx0Zm9yIChjb25zdCBkaXJlbnQgb2YgZmlsZXMpIHtcblx0XHRkaXJlbnQubmFtZSA9IHJlc29sdmUoZGlyLCBkaXJlbnQubmFtZSk7XG5cblx0XHRpZiAoZGlyZW50LmlzRmlsZSgpICYmIGZpbGVUeXBlcy5pbmNsdWRlcyhleHRuYW1lKGRpcmVudC5uYW1lKSkgJiYgIWV4Y2x1ZGUuaW5jbHVkZXMoYmFzZW5hbWUoZGlyZW50Lm5hbWUpKSlcblx0XHRcdHJlc3VsdC5wdXNoKGRpcmVudCk7XG5cdFx0ZWxzZSBpZiAoZGlyZW50LmlzRGlyZWN0b3J5KCkpXG5cdFx0XHRyZXN1bHQucHVzaCguLi53YWxrRGlyZWN0b3J5KGRpcmVudC5uYW1lLCBmaWxlVHlwZXMsIGV4Y2x1ZGUpKTtcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGF3blByb2Nlc3MoY29tbWFuZDogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSk6IFByb21pc2U8bnVtYmVyIHwgbnVsbD4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGNvbnN0IHNwYXduZWRQcm9jZXNzID0gc3Bhd24oXG5cdFx0XHRjb21tYW5kLFxuXHRcdFx0YXJncyxcblx0XHRcdHsgc3RkaW86IFwiaW5oZXJpdFwiIH1cblx0XHQpO1xuXG5cdFx0c3Bhd25lZFByb2Nlc3Mub24oXCJleGl0XCIsIGNvZGUgPT4ge1xuXHRcdFx0aWYgKGNvZGUpXG5cdFx0XHRcdHJlamVjdChjb2RlKTtcblxuXHRcdFx0cmVzb2x2ZShjb2RlKTtcblx0XHR9KTtcblx0fSk7XG59Il19