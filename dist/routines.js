"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceAll = void 0;
function replaceAll(buffer, find, replace) {
    let matchCount = 0;
    const chunkSize = 128 * 1024 * 1024;
    let chunkQueued;
    let currentOffset = 0;
    let output = Buffer.alloc(0);
    while (currentOffset < buffer.length) {
        let chunk = buffer.slice(currentOffset, currentOffset + chunkSize);
        let chunkString;
        if (chunkQueued)
            chunkString = chunkQueued.toString("binary") + chunk.toString("binary");
        else
            chunkString = chunk.toString("binary");
        let match;
        while ((match = find.exec(chunkString)) !== null) {
            const index = currentOffset + (match.index - (chunkQueued ? chunkQueued.length : 0));
            console.log(`Processing match <${Buffer.from(match[0], "binary").toString("hex").toUpperCase().match(/.{1,2}/g).join(" ")}> at offset ${index} (Hex: ${index.toString(16)})`);
            chunkString = [
                chunkString.slice(0, match.index),
                formatStringWithTokens(replace, [...match]),
                chunkString.slice(match.index + match[0].length)
            ].join("");
            matchCount++;
        }
        output = Buffer.concat([output, Buffer.from(chunkString.slice(0, chunkSize), "binary")]);
        chunk = Buffer.from(chunkString.slice(chunkSize), "binary");
        if (chunk.length)
            chunkQueued = chunk;
        currentOffset += chunkSize;
    }
    output = Buffer.concat([output, chunkQueued || Buffer.alloc(0)]);
    console.log(`Found ${matchCount} matches`);
    return [output, matchCount];
}
exports.replaceAll = replaceAll;
function formatStringWithTokens(string, tokens) {
    if (tokens) {
        let match;
        while ((match = /\{([0-9]+)\}/g.exec(string)) !== null) {
            string = [
                string.slice(0, match.index),
                tokens[match[1]],
                string.slice(match.index + match[0].length)
            ].join("");
        }
    }
    return string;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcm91dGluZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBZ0IsVUFBVSxDQUFDLE1BQWMsRUFBRSxJQUFZLEVBQUUsT0FBZTtJQUN2RSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7SUFDcEMsSUFBSSxXQUErQixDQUFDO0lBQ3BDLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztJQUN0QixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTdCLE9BQU8sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDckMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsYUFBYSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLElBQUksV0FBVyxDQUFDO1FBQ2hCLElBQUcsV0FBVztZQUNiLFdBQVcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7O1lBRXhFLFdBQVcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhDLElBQUksS0FBNkIsQ0FBQztRQUNsQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDakQsTUFBTSxLQUFLLEdBQUcsYUFBYSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxLQUFLLFVBQVUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0ssV0FBVyxHQUFHO2dCQUNiLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ2pDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQzNDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQ2hELENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1gsVUFBVSxFQUFFLENBQUM7U0FDYjtRQUVELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFNUQsSUFBRyxLQUFLLENBQUMsTUFBTTtZQUNkLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFckIsYUFBYSxJQUFJLFNBQVMsQ0FBQztLQUMzQjtJQUNELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLFdBQVcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsVUFBVSxVQUFVLENBQUMsQ0FBQztJQUMzQyxPQUFPLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUF4Q0QsZ0NBd0NDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxNQUFjLEVBQUUsTUFBaUI7SUFDaEUsSUFBSSxNQUFNLEVBQUU7UUFDWCxJQUFJLEtBQTZCLENBQUM7UUFDbEMsT0FBTSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFDO1lBQ3JELE1BQU0sR0FBRztnQkFDUixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO2dCQUM1QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQzthQUMzQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNYO0tBQ0Q7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVwbGFjZUFsbChidWZmZXI6IEJ1ZmZlciwgZmluZDogUmVnRXhwLCByZXBsYWNlOiBzdHJpbmcpOiBbQnVmZmVyLCBudW1iZXJdIHtcblx0bGV0IG1hdGNoQ291bnQgPSAwO1xuXG5cdGNvbnN0IGNodW5rU2l6ZSA9IDEyOCAqIDEwMjQgKiAxMDI0OyAvLyAxMjhNaUIgaW4gYnl0ZXNcblx0bGV0IGNodW5rUXVldWVkOiBCdWZmZXIgfCB1bmRlZmluZWQ7XG5cdGxldCBjdXJyZW50T2Zmc2V0ID0gMDtcblx0bGV0IG91dHB1dCA9IEJ1ZmZlci5hbGxvYygwKTtcblxuXHR3aGlsZSAoY3VycmVudE9mZnNldCA8IGJ1ZmZlci5sZW5ndGgpIHtcblx0XHRsZXQgY2h1bmsgPSBidWZmZXIuc2xpY2UoY3VycmVudE9mZnNldCwgY3VycmVudE9mZnNldCArIGNodW5rU2l6ZSk7XG5cdFx0bGV0IGNodW5rU3RyaW5nO1xuXHRcdGlmKGNodW5rUXVldWVkKVxuXHRcdFx0Y2h1bmtTdHJpbmcgPSBjaHVua1F1ZXVlZC50b1N0cmluZyhcImJpbmFyeVwiKSArIGNodW5rLnRvU3RyaW5nKFwiYmluYXJ5XCIpO1xuXHRcdGVsc2Vcblx0XHRcdGNodW5rU3RyaW5nID0gY2h1bmsudG9TdHJpbmcoXCJiaW5hcnlcIik7XG5cblx0XHRsZXQgbWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGw7XG5cdFx0d2hpbGUgKChtYXRjaCA9IGZpbmQuZXhlYyhjaHVua1N0cmluZykpICE9PSBudWxsKSB7XG5cdFx0XHRjb25zdCBpbmRleCA9IGN1cnJlbnRPZmZzZXQgKyAobWF0Y2guaW5kZXggLSAoY2h1bmtRdWV1ZWQgPyBjaHVua1F1ZXVlZC5sZW5ndGggOiAwKSk7XG5cdFx0XHRjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBtYXRjaCA8JHtCdWZmZXIuZnJvbShtYXRjaFswXSwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJoZXhcIikudG9VcHBlckNhc2UoKS5tYXRjaCgvLnsxLDJ9L2cpIS5qb2luKFwiIFwiKX0+IGF0IG9mZnNldCAke2luZGV4fSAoSGV4OiAke2luZGV4LnRvU3RyaW5nKDE2KX0pYCk7XG5cdFx0XHRjaHVua1N0cmluZyA9IFtcblx0XHRcdFx0Y2h1bmtTdHJpbmcuc2xpY2UoMCwgbWF0Y2guaW5kZXgpLFxuXHRcdFx0XHRmb3JtYXRTdHJpbmdXaXRoVG9rZW5zKHJlcGxhY2UsIFsuLi5tYXRjaF0pLFxuXHRcdFx0XHRjaHVua1N0cmluZy5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aClcblx0XHRcdF0uam9pbihcIlwiKTtcblx0XHRcdG1hdGNoQ291bnQrKztcblx0XHR9XG5cblx0XHRvdXRwdXQgPSBCdWZmZXIuY29uY2F0KFtvdXRwdXQsIEJ1ZmZlci5mcm9tKGNodW5rU3RyaW5nLnNsaWNlKDAsIGNodW5rU2l6ZSksIFwiYmluYXJ5XCIpXSk7XG5cdFx0Y2h1bmsgPSBCdWZmZXIuZnJvbShjaHVua1N0cmluZy5zbGljZShjaHVua1NpemUpLCBcImJpbmFyeVwiKTtcblxuXHRcdGlmKGNodW5rLmxlbmd0aClcblx0XHRcdGNodW5rUXVldWVkID0gY2h1bms7XG5cblx0XHRjdXJyZW50T2Zmc2V0ICs9IGNodW5rU2l6ZTtcblx0fVxuXHRvdXRwdXQgPSBCdWZmZXIuY29uY2F0KFtvdXRwdXQsIGNodW5rUXVldWVkIHx8IEJ1ZmZlci5hbGxvYygwKV0pO1xuXG5cdGNvbnNvbGUubG9nKGBGb3VuZCAke21hdGNoQ291bnR9IG1hdGNoZXNgKTtcblx0cmV0dXJuIFtvdXRwdXQsIG1hdGNoQ291bnRdO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTdHJpbmdXaXRoVG9rZW5zKHN0cmluZzogc3RyaW5nLCB0b2tlbnM/OiBzdHJpbmdbXSk6IHN0cmluZyB7XG5cdGlmICh0b2tlbnMpIHtcblx0XHRsZXQgbWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGw7XG5cdFx0d2hpbGUoKG1hdGNoID0gL1xceyhbMC05XSspXFx9L2cuZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCl7XG5cdFx0XHRzdHJpbmcgPSBbXG5cdFx0XHRcdHN0cmluZy5zbGljZSgwLCBtYXRjaC5pbmRleCksXG5cdFx0XHRcdHRva2Vuc1ttYXRjaFsxXV0sXG5cdFx0XHRcdHN0cmluZy5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aClcblx0XHRcdF0uam9pbihcIlwiKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nO1xufVxuIl19