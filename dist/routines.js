"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceAll = void 0;
function replaceAll(buffer, find, replace) {
    let matchCount = 0;
    const chunkSize = 128 * 1024 * 1024;
    const chunkQueued = {
        buffer: undefined,
        offset: 0
    };
    let currentOffset = 0;
    while (currentOffset < buffer.length) {
        let chunk = buffer.slice(currentOffset, currentOffset + chunkSize);
        let chunkString;
        if (chunkQueued.buffer)
            chunkString = chunkQueued.buffer.toString("binary") + chunk.toString("binary");
        else
            chunkString = chunk.toString("binary");
        let match;
        while ((match = find.exec(chunkString)) !== null) {
            const index = currentOffset + (match.index - (chunkQueued.buffer ? chunkQueued.buffer.length : 0));
            console.log(`Processing match <${Buffer.from(match[0], "binary").toString("hex").toUpperCase().match(/.{1,2}/g).join(" ")}> at offset ${index} (Hex: ${index.toString(16)})`);
            chunkString = [
                chunkString.slice(0, match.index),
                formatStringWithTokens(replace, [...match]),
                chunkString.slice(match.index + match[0].length)
            ].join("");
            matchCount++;
        }
        if (chunkQueued.buffer) {
            writeWithTail(buffer, chunkQueued.buffer, chunkQueued.offset);
            chunk = Buffer.from(chunkString.slice(chunkQueued.buffer.length), "binary");
        }
        else
            chunk = Buffer.from(chunkString, "binary");
        if (chunk.length) {
            chunkQueued.buffer = chunk;
            chunkQueued.offset = currentOffset;
        }
        if (chunkQueued.buffer)
            currentOffset += chunkQueued.buffer.length;
    }
    if (chunkQueued.buffer)
        writeWithTail(buffer, chunkQueued.buffer, chunkQueued.offset);
    console.log(`Found ${matchCount} matches`);
    return matchCount;
}
exports.replaceAll = replaceAll;
function writeWithTail(buffer, otherBuffer, offset) {
    const bytesWritten = buffer.write(otherBuffer.toString("binary"), offset, otherBuffer.length, "binary");
    if (bytesWritten !== otherBuffer.length)
        buffer = Buffer.concat([buffer, otherBuffer.slice(bytesWritten)]);
}
function formatStringWithTokens(string, tokens) {
    if (tokens) {
        let match;
        while ((match = /\{([0-9]+)\}/g.exec(string)) !== null) {
            string = [
                string.slice(0, match.index),
                tokens[match[1]],
                string.slice(match.index + match[0].length)
            ].join("");
        }
    }
    return string;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcm91dGluZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBZ0IsVUFBVSxDQUFDLE1BQWMsRUFBRSxJQUFZLEVBQUUsT0FBZTtJQUN2RSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7SUFDcEMsTUFBTSxXQUFXLEdBQXdDO1FBQ3hELE1BQU0sRUFBRSxTQUFTO1FBQ2pCLE1BQU0sRUFBRSxDQUFDO0tBQ1QsQ0FBQztJQUNGLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztJQUV0QixPQUFPLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3JDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGFBQWEsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFJLFdBQVcsQ0FBQztRQUNoQixJQUFHLFdBQVcsQ0FBQyxNQUFNO1lBQ3BCLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztZQUUvRSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV4QyxJQUFJLEtBQTZCLENBQUM7UUFDbEMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ2pELE1BQU0sS0FBSyxHQUFHLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FB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QyxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQzNDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ1g7S0FDRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQWxsKGJ1ZmZlcjogQnVmZmVyLCBmaW5kOiBSZWdFeHAsIHJlcGxhY2U6IHN0cmluZyk6IG51bWJlciB7XG5cdGxldCBtYXRjaENvdW50ID0gMDtcblxuXHRjb25zdCBjaHVua1NpemUgPSAxMjggKiAxMDI0ICogMTAyNDsgLy8gMTI4TWlCIGluIGJ5dGVzXG5cdGNvbnN0IGNodW5rUXVldWVkOiB7IGJ1ZmZlcj86IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgfSA9IHtcblx0XHRidWZmZXI6IHVuZGVmaW5lZCxcblx0XHRvZmZzZXQ6IDBcblx0fTtcblx0bGV0IGN1cnJlbnRPZmZzZXQgPSAwO1xuXG5cdHdoaWxlIChjdXJyZW50T2Zmc2V0IDwgYnVmZmVyLmxlbmd0aCkge1xuXHRcdGxldCBjaHVuayA9IGJ1ZmZlci5zbGljZShjdXJyZW50T2Zmc2V0LCBjdXJyZW50T2Zmc2V0ICsgY2h1bmtTaXplKTtcblx0XHRsZXQgY2h1bmtTdHJpbmc7XG5cdFx0aWYoY2h1bmtRdWV1ZWQuYnVmZmVyKVxuXHRcdFx0Y2h1bmtTdHJpbmcgPSBjaHVua1F1ZXVlZC5idWZmZXIudG9TdHJpbmcoXCJiaW5hcnlcIikgKyBjaHVuay50b1N0cmluZyhcImJpbmFyeVwiKTtcblx0XHRlbHNlXG5cdFx0XHRjaHVua1N0cmluZyA9IGNodW5rLnRvU3RyaW5nKFwiYmluYXJ5XCIpO1xuXG5cdFx0bGV0IG1hdGNoOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsO1xuXHRcdHdoaWxlICgobWF0Y2ggPSBmaW5kLmV4ZWMoY2h1bmtTdHJpbmcpKSAhPT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgaW5kZXggPSBjdXJyZW50T2Zmc2V0ICsgKG1hdGNoLmluZGV4IC0gKGNodW5rUXVldWVkLmJ1ZmZlciA/IGNodW5rUXVldWVkLmJ1ZmZlci5sZW5ndGggOiAwKSk7XG5cdFx0XHRjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBtYXRjaCA8JHtCdWZmZXIuZnJvbShtYXRjaFswXSwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJoZXhcIikudG9VcHBlckNhc2UoKS5tYXRjaCgvLnsxLDJ9L2cpIS5qb2luKFwiIFwiKX0+IGF0IG9mZnNldCAke2luZGV4fSAoSGV4OiAke2luZGV4LnRvU3RyaW5nKDE2KX0pYCk7XG5cdFx0XHRjaHVua1N0cmluZyA9IFtcblx0XHRcdFx0Y2h1bmtTdHJpbmcuc2xpY2UoMCwgbWF0Y2guaW5kZXgpLFxuXHRcdFx0XHRmb3JtYXRTdHJpbmdXaXRoVG9rZW5zKHJlcGxhY2UsIFsuLi5tYXRjaF0pLFxuXHRcdFx0XHRjaHVua1N0cmluZy5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aClcblx0XHRcdF0uam9pbihcIlwiKTtcblx0XHRcdG1hdGNoQ291bnQrKztcblx0XHR9XG5cblx0XHRpZihjaHVua1F1ZXVlZC5idWZmZXIpe1xuXHRcdFx0d3JpdGVXaXRoVGFpbChidWZmZXIsIGNodW5rUXVldWVkLmJ1ZmZlciwgY2h1bmtRdWV1ZWQub2Zmc2V0KTtcblx0XHRcdGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmtTdHJpbmcuc2xpY2UoY2h1bmtRdWV1ZWQuYnVmZmVyLmxlbmd0aCksIFwiYmluYXJ5XCIpO1xuXHRcdH1lbHNlXG5cdFx0XHRjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rU3RyaW5nLCBcImJpbmFyeVwiKTtcblxuXHRcdGlmKGNodW5rLmxlbmd0aCl7XG5cdFx0XHRjaHVua1F1ZXVlZC5idWZmZXIgPSBjaHVuaztcblx0XHRcdGNodW5rUXVldWVkLm9mZnNldCA9IGN1cnJlbnRPZmZzZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKGNodW5rUXVldWVkLmJ1ZmZlcilcblx0XHRcdGN1cnJlbnRPZmZzZXQgKz0gY2h1bmtRdWV1ZWQuYnVmZmVyLmxlbmd0aDtcblx0fVxuXG5cdGlmKGNodW5rUXVldWVkLmJ1ZmZlcilcblx0XHR3cml0ZVdpdGhUYWlsKGJ1ZmZlciwgY2h1bmtRdWV1ZWQuYnVmZmVyLCBjaHVua1F1ZXVlZC5vZmZzZXQpO1xuXG5cdGNvbnNvbGUubG9nKGBGb3VuZCAke21hdGNoQ291bnR9IG1hdGNoZXNgKTtcblx0cmV0dXJuIG1hdGNoQ291bnQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlV2l0aFRhaWwoYnVmZmVyOiBCdWZmZXIsIG90aGVyQnVmZmVyOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyKXtcblx0Y29uc3QgYnl0ZXNXcml0dGVuID0gYnVmZmVyLndyaXRlKG90aGVyQnVmZmVyLnRvU3RyaW5nKFwiYmluYXJ5XCIpLCBvZmZzZXQsIG90aGVyQnVmZmVyLmxlbmd0aCwgXCJiaW5hcnlcIik7XG5cdGlmKGJ5dGVzV3JpdHRlbiAhPT0gb3RoZXJCdWZmZXIubGVuZ3RoKVxuXHRcdGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgb3RoZXJCdWZmZXIuc2xpY2UoYnl0ZXNXcml0dGVuKV0pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTdHJpbmdXaXRoVG9rZW5zKHN0cmluZzogc3RyaW5nLCB0b2tlbnM/OiBzdHJpbmdbXSk6IHN0cmluZyB7XG5cdGlmICh0b2tlbnMpIHtcblx0XHRsZXQgbWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGw7XG5cdFx0d2hpbGUoKG1hdGNoID0gL1xceyhbMC05XSspXFx9L2cuZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCl7XG5cdFx0XHRzdHJpbmcgPSBbXG5cdFx0XHRcdHN0cmluZy5zbGljZSgwLCBtYXRjaC5pbmRleCksXG5cdFx0XHRcdHRva2Vuc1ttYXRjaFsxXV0sXG5cdFx0XHRcdHN0cmluZy5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aClcblx0XHRcdF0uam9pbihcIlwiKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nO1xufVxuIl19