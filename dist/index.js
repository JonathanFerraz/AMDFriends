"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signFile = exports.patchFile = void 0;
const child_process_1 = require("child_process");
const util_1 = require("util");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const regexes_1 = __importDefault(require("./regexes"));
const routines_1 = require("./routines");
async function patchFile(filePath, dryRun, inPlace) {
    let patchedFilePath = path_1.resolve(path_1.dirname(filePath), path_1.basename(filePath, path_1.extname(filePath)) + ".patched" + path_1.extname(filePath));
    if (inPlace)
        patchedFilePath = filePath;
    let buffer = await promises_1.readFile(filePath, "binary");
    let matchCount = 0;
    let patchOccurred = false;
    console.log("Searching and replacing for instruction __mkl_serv_intel_cpu_true...");
    [buffer, matchCount] = routines_1.replaceAll(buffer, regexes_1.default.__mkl_serv_intel_cpu_true.find, regexes_1.default.__mkl_serv_intel_cpu_true.replace);
    if (matchCount)
        patchOccurred = true;
    console.log("Searching and replacing for instructions __intel_fast_memset.A and __intel_fast_memcpy.A...");
    [buffer, matchCount] = routines_1.replaceAll(buffer, regexes_1.default.__intel_fast_memset_or_memcpy_A.find, regexes_1.default.__intel_fast_memset_or_memcpy_A.replace);
    if (patchOccurred || matchCount)
        patchOccurred = true;
    if (patchOccurred) {
        console.log("Writing resulting file...");
        if (!dryRun)
            await promises_1.writeFile(patchedFilePath, buffer, "binary");
        const xattrCmd = `xattr -cr "${patchedFilePath}"`;
        console.log("Invoking command:", xattrCmd);
        if (!dryRun)
            await util_1.promisify(child_process_1.exec)(xattrCmd);
        return patchedFilePath;
    }
    return null;
}
exports.patchFile = patchFile;
async function signFile(filePath, dryRun) {
    const signCmd = `codesign --force --deep --sign - "${filePath}"`;
    console.log("Invoking command:", signCmd);
    if (!dryRun)
        await util_1.promisify(child_process_1.exec)(signCmd);
}
exports.signFile = signFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaURBQXFDO0FBQ3JDLCtCQUFpQztBQUNqQywwQ0FBa0Q7QUFDbEQsK0JBQTJEO0FBQzNELHdEQUFnQztBQUNoQyx5Q0FBd0M7QUFFakMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxRQUFnQixFQUFFLE1BQWUsRUFBRSxPQUFnQjtJQUNsRixJQUFJLGVBQWUsR0FBRyxjQUFPLENBQUMsY0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGVBQVEsQ0FBQyxRQUFRLEVBQUUsY0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsVUFBVSxHQUFHLGNBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3pILElBQUcsT0FBTztRQUNULGVBQWUsR0FBRyxRQUFRLENBQUM7SUFFNUIsSUFBSSxNQUFNLEdBQUcsTUFBTSxtQkFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDbkIsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBRzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0VBQXNFLENBQUMsQ0FBQztJQUNwRixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsR0FBRyxxQkFBVSxDQUNoQyxNQUFNLEVBQ04saUJBQU8sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLEVBQ3RDLGlCQUFPLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUN6QyxDQUFDO0lBQ0YsSUFBRyxVQUFVO1FBQUUsYUFBYSxHQUFHLElBQUksQ0FBQztJQUVwQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZGQUE2RixDQUFDLENBQUM7SUFDM0csQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcscUJBQVUsQ0FDaEMsTUFBTSxFQUNOLGlCQUFPLENBQUMsK0JBQStCLENBQUMsSUFBSSxFQUM1QyxpQkFBTyxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FDL0MsQ0FBQztJQUNGLElBQUcsYUFBYSxJQUFJLFVBQVU7UUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBRXJELElBQUcsYUFBYSxFQUFDO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsTUFBTTtZQUNWLE1BQU0sb0JBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXBELE1BQU0sUUFBUSxHQUFHLGNBQWMsZUFBZSxHQUFHLENBQUM7UUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTTtZQUNWLE1BQU0sZ0JBQVMsQ0FBQyxvQkFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakMsT0FBTyxlQUFlLENBQUM7S0FDdkI7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUF4Q0QsOEJBd0NDO0FBRU0sS0FBSyxVQUFVLFFBQVEsQ0FBQyxRQUFnQixFQUFFLE1BQWU7SUFDL0QsTUFBTSxPQUFPLEdBQUcscUNBQXFDLFFBQVEsR0FBRyxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUMsSUFBRyxDQUFDLE1BQU07UUFDVCxNQUFNLGdCQUFTLENBQUMsb0JBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFMRCw0QkFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcInV0aWxcIjtcbmltcG9ydCB7IHJlYWRGaWxlLCB3cml0ZUZpbGUgfSBmcm9tIFwiZnMvcHJvbWlzZXNcIjtcbmltcG9ydCB7IGJhc2VuYW1lLCBkaXJuYW1lLCBleHRuYW1lLCByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCByZWdleGVzIGZyb20gXCIuL3JlZ2V4ZXNcIjtcbmltcG9ydCB7IHJlcGxhY2VBbGwgfSBmcm9tIFwiLi9yb3V0aW5lc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGF0Y2hGaWxlKGZpbGVQYXRoOiBzdHJpbmcsIGRyeVJ1bjogYm9vbGVhbiwgaW5QbGFjZTogYm9vbGVhbik6IFByb21pc2U8c3RyaW5nfG51bGw+IHtcblx0bGV0IHBhdGNoZWRGaWxlUGF0aCA9IHJlc29sdmUoZGlybmFtZShmaWxlUGF0aCksIGJhc2VuYW1lKGZpbGVQYXRoLCBleHRuYW1lKGZpbGVQYXRoKSkgKyBcIi5wYXRjaGVkXCIgKyBleHRuYW1lKGZpbGVQYXRoKSk7XG5cdGlmKGluUGxhY2UpXG5cdFx0cGF0Y2hlZEZpbGVQYXRoID0gZmlsZVBhdGg7XG5cblx0bGV0IGJ1ZmZlciA9IGF3YWl0IHJlYWRGaWxlKGZpbGVQYXRoLCBcImJpbmFyeVwiKTtcblx0bGV0IG1hdGNoQ291bnQgPSAwO1xuXHRsZXQgcGF0Y2hPY2N1cnJlZCA9IGZhbHNlO1xuXG5cblx0Y29uc29sZS5sb2coXCJTZWFyY2hpbmcgYW5kIHJlcGxhY2luZyBmb3IgaW5zdHJ1Y3Rpb24gX19ta2xfc2Vydl9pbnRlbF9jcHVfdHJ1ZS4uLlwiKTtcblx0W2J1ZmZlciwgbWF0Y2hDb3VudF0gPSByZXBsYWNlQWxsKFxuXHRcdGJ1ZmZlcixcblx0XHRyZWdleGVzLl9fbWtsX3NlcnZfaW50ZWxfY3B1X3RydWUuZmluZCxcblx0XHRyZWdleGVzLl9fbWtsX3NlcnZfaW50ZWxfY3B1X3RydWUucmVwbGFjZVxuXHQpO1xuXHRpZihtYXRjaENvdW50KSBwYXRjaE9jY3VycmVkID0gdHJ1ZTtcblxuXHRjb25zb2xlLmxvZyhcIlNlYXJjaGluZyBhbmQgcmVwbGFjaW5nIGZvciBpbnN0cnVjdGlvbnMgX19pbnRlbF9mYXN0X21lbXNldC5BIGFuZCBfX2ludGVsX2Zhc3RfbWVtY3B5LkEuLi5cIik7XG5cdFtidWZmZXIsIG1hdGNoQ291bnRdID0gcmVwbGFjZUFsbChcblx0XHRidWZmZXIsXG5cdFx0cmVnZXhlcy5fX2ludGVsX2Zhc3RfbWVtc2V0X29yX21lbWNweV9BLmZpbmQsXG5cdFx0cmVnZXhlcy5fX2ludGVsX2Zhc3RfbWVtc2V0X29yX21lbWNweV9BLnJlcGxhY2Vcblx0KTtcblx0aWYocGF0Y2hPY2N1cnJlZCB8fCBtYXRjaENvdW50KSBwYXRjaE9jY3VycmVkID0gdHJ1ZTtcblxuXHRpZihwYXRjaE9jY3VycmVkKXtcblx0XHRjb25zb2xlLmxvZyhcIldyaXRpbmcgcmVzdWx0aW5nIGZpbGUuLi5cIik7XG5cdFx0aWYgKCFkcnlSdW4pXG5cdFx0XHRhd2FpdCB3cml0ZUZpbGUocGF0Y2hlZEZpbGVQYXRoLCBidWZmZXIsIFwiYmluYXJ5XCIpO1xuXG5cdFx0Y29uc3QgeGF0dHJDbWQgPSBgeGF0dHIgLWNyIFwiJHtwYXRjaGVkRmlsZVBhdGh9XCJgO1xuXHRcdGNvbnNvbGUubG9nKFwiSW52b2tpbmcgY29tbWFuZDpcIiwgeGF0dHJDbWQpO1xuXHRcdGlmICghZHJ5UnVuKVxuXHRcdFx0YXdhaXQgcHJvbWlzaWZ5KGV4ZWMpKHhhdHRyQ21kKTtcblxuXHRcdHJldHVybiBwYXRjaGVkRmlsZVBhdGg7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25GaWxlKGZpbGVQYXRoOiBzdHJpbmcsIGRyeVJ1bjogYm9vbGVhbil7XG5cdGNvbnN0IHNpZ25DbWQgPSBgY29kZXNpZ24gLS1mb3JjZSAtLWRlZXAgLS1zaWduIC0gXCIke2ZpbGVQYXRofVwiYDtcblx0Y29uc29sZS5sb2coXCJJbnZva2luZyBjb21tYW5kOlwiLCBzaWduQ21kKTtcblx0aWYoIWRyeVJ1bilcblx0XHRhd2FpdCBwcm9taXNpZnkoZXhlYykoc2lnbkNtZCk7XG59XG4iXX0=