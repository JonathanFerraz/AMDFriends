"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signFile = exports.patchFile = void 0;
const child_process_1 = require("child_process");
const util_1 = require("util");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const regexes_1 = __importDefault(require("./regexes"));
const routines_1 = require("./routines");
async function patchFile(filePath, dryRun, inPlace) {
    let patchedFilePath = path_1.resolve(path_1.dirname(filePath), path_1.basename(filePath, path_1.extname(filePath)) + ".patched" + path_1.extname(filePath));
    if (inPlace)
        patchedFilePath = filePath;
    let buffer = await promises_1.readFile(filePath);
    let matchCount = 0;
    let patchOccurred = false;
    console.log("Searching and replacing for instruction __mkl_serv_intel_cpu_true...");
    [buffer, matchCount] = routines_1.replaceAll(buffer, regexes_1.default.__mkl_serv_intel_cpu_true.find, regexes_1.default.__mkl_serv_intel_cpu_true.replace);
    if (matchCount)
        patchOccurred = true;
    console.log("Searching and replacing for instructions __intel_fast_memset.A and __intel_fast_memcpy.A...");
    [buffer, matchCount] = routines_1.replaceAll(buffer, regexes_1.default.__intel_fast_memset_or_memcpy_A.find, regexes_1.default.__intel_fast_memset_or_memcpy_A.replace);
    if (patchOccurred || matchCount)
        patchOccurred = true;
    if (patchOccurred) {
        console.log("Writing resulting file...");
        if (!dryRun)
            await promises_1.writeFile(patchedFilePath, buffer);
        const xattrCmd = `xattr -cr "${patchedFilePath}"`;
        console.log("Invoking command:", xattrCmd);
        if (!dryRun)
            await util_1.promisify(child_process_1.exec)(xattrCmd);
        return patchedFilePath;
    }
    return null;
}
exports.patchFile = patchFile;
async function signFile(filePath, dryRun) {
    const signCmd = `codesign --force --deep --sign - "${filePath}"`;
    console.log("Invoking command:", signCmd);
    if (!dryRun)
        await util_1.promisify(child_process_1.exec)(signCmd);
}
exports.signFile = signFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaURBQXFDO0FBQ3JDLCtCQUFpQztBQUNqQywwQ0FBa0Q7QUFDbEQsK0JBQTJEO0FBQzNELHdEQUFnQztBQUNoQyx5Q0FBd0M7QUFFakMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxRQUFnQixFQUFFLE1BQWUsRUFBRSxPQUFnQjtJQUNsRixJQUFJLGVBQWUsR0FBRyxjQUFPLENBQUMsY0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGVBQVEsQ0FBQyxRQUFRLEVBQUUsY0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsVUFBVSxHQUFHLGNBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3pILElBQUcsT0FBTztRQUNULGVBQWUsR0FBRyxRQUFRLENBQUM7SUFFNUIsSUFBSSxNQUFNLEdBQUcsTUFBTSxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFHMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO0lBQ3BGLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHLHFCQUFVLENBQ2hDLE1BQU0sRUFDTixpQkFBTyxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFDdEMsaUJBQU8sQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQ3pDLENBQUM7SUFDRixJQUFHLFVBQVU7UUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBRXBDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkZBQTZGLENBQUMsQ0FBQztJQUMzRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsR0FBRyxxQkFBVSxDQUNoQyxNQUFNLEVBQ04saUJBQU8sQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLEVBQzVDLGlCQUFPLENBQUMsK0JBQStCLENBQUMsT0FBTyxDQUMvQyxDQUFDO0lBQ0YsSUFBRyxhQUFhLElBQUksVUFBVTtRQUFFLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFFckQsSUFBRyxhQUFhLEVBQUM7UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNO1lBQ1YsTUFBTSxvQkFBUyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUxQyxNQUFNLFFBQVEsR0FBRyxjQUFjLGVBQWUsR0FBRyxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE1BQU07WUFDVixNQUFNLGdCQUFTLENBQUMsb0JBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpDLE9BQU8sZUFBZSxDQUFDO0tBQ3ZCO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBeENELDhCQXdDQztBQUVNLEtBQUssVUFBVSxRQUFRLENBQUMsUUFBZ0IsRUFBRSxNQUFlO0lBQy9ELE1BQU0sT0FBTyxHQUFHLHFDQUFxQyxRQUFRLEdBQUcsQ0FBQztJQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLElBQUcsQ0FBQyxNQUFNO1FBQ1QsTUFBTSxnQkFBUyxDQUFDLG9CQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBTEQsNEJBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJ1dGlsXCI7XG5pbXBvcnQgeyByZWFkRmlsZSwgd3JpdGVGaWxlIH0gZnJvbSBcImZzL3Byb21pc2VzXCI7XG5pbXBvcnQgeyBiYXNlbmFtZSwgZGlybmFtZSwgZXh0bmFtZSwgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgcmVnZXhlcyBmcm9tIFwiLi9yZWdleGVzXCI7XG5pbXBvcnQgeyByZXBsYWNlQWxsIH0gZnJvbSBcIi4vcm91dGluZXNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhdGNoRmlsZShmaWxlUGF0aDogc3RyaW5nLCBkcnlSdW46IGJvb2xlYW4sIGluUGxhY2U6IGJvb2xlYW4pOiBQcm9taXNlPHN0cmluZ3xudWxsPiB7XG5cdGxldCBwYXRjaGVkRmlsZVBhdGggPSByZXNvbHZlKGRpcm5hbWUoZmlsZVBhdGgpLCBiYXNlbmFtZShmaWxlUGF0aCwgZXh0bmFtZShmaWxlUGF0aCkpICsgXCIucGF0Y2hlZFwiICsgZXh0bmFtZShmaWxlUGF0aCkpO1xuXHRpZihpblBsYWNlKVxuXHRcdHBhdGNoZWRGaWxlUGF0aCA9IGZpbGVQYXRoO1xuXG5cdGxldCBidWZmZXIgPSBhd2FpdCByZWFkRmlsZShmaWxlUGF0aCk7XG5cdGxldCBtYXRjaENvdW50ID0gMDtcblx0bGV0IHBhdGNoT2NjdXJyZWQgPSBmYWxzZTtcblxuXG5cdGNvbnNvbGUubG9nKFwiU2VhcmNoaW5nIGFuZCByZXBsYWNpbmcgZm9yIGluc3RydWN0aW9uIF9fbWtsX3NlcnZfaW50ZWxfY3B1X3RydWUuLi5cIik7XG5cdFtidWZmZXIsIG1hdGNoQ291bnRdID0gcmVwbGFjZUFsbChcblx0XHRidWZmZXIsXG5cdFx0cmVnZXhlcy5fX21rbF9zZXJ2X2ludGVsX2NwdV90cnVlLmZpbmQsXG5cdFx0cmVnZXhlcy5fX21rbF9zZXJ2X2ludGVsX2NwdV90cnVlLnJlcGxhY2Vcblx0KTtcblx0aWYobWF0Y2hDb3VudCkgcGF0Y2hPY2N1cnJlZCA9IHRydWU7XG5cblx0Y29uc29sZS5sb2coXCJTZWFyY2hpbmcgYW5kIHJlcGxhY2luZyBmb3IgaW5zdHJ1Y3Rpb25zIF9faW50ZWxfZmFzdF9tZW1zZXQuQSBhbmQgX19pbnRlbF9mYXN0X21lbWNweS5BLi4uXCIpO1xuXHRbYnVmZmVyLCBtYXRjaENvdW50XSA9IHJlcGxhY2VBbGwoXG5cdFx0YnVmZmVyLFxuXHRcdHJlZ2V4ZXMuX19pbnRlbF9mYXN0X21lbXNldF9vcl9tZW1jcHlfQS5maW5kLFxuXHRcdHJlZ2V4ZXMuX19pbnRlbF9mYXN0X21lbXNldF9vcl9tZW1jcHlfQS5yZXBsYWNlXG5cdCk7XG5cdGlmKHBhdGNoT2NjdXJyZWQgfHwgbWF0Y2hDb3VudCkgcGF0Y2hPY2N1cnJlZCA9IHRydWU7XG5cblx0aWYocGF0Y2hPY2N1cnJlZCl7XG5cdFx0Y29uc29sZS5sb2coXCJXcml0aW5nIHJlc3VsdGluZyBmaWxlLi4uXCIpO1xuXHRcdGlmICghZHJ5UnVuKVxuXHRcdFx0YXdhaXQgd3JpdGVGaWxlKHBhdGNoZWRGaWxlUGF0aCwgYnVmZmVyKTtcblxuXHRcdGNvbnN0IHhhdHRyQ21kID0gYHhhdHRyIC1jciBcIiR7cGF0Y2hlZEZpbGVQYXRofVwiYDtcblx0XHRjb25zb2xlLmxvZyhcIkludm9raW5nIGNvbW1hbmQ6XCIsIHhhdHRyQ21kKTtcblx0XHRpZiAoIWRyeVJ1bilcblx0XHRcdGF3YWl0IHByb21pc2lmeShleGVjKSh4YXR0ckNtZCk7XG5cblx0XHRyZXR1cm4gcGF0Y2hlZEZpbGVQYXRoO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduRmlsZShmaWxlUGF0aDogc3RyaW5nLCBkcnlSdW46IGJvb2xlYW4pe1xuXHRjb25zdCBzaWduQ21kID0gYGNvZGVzaWduIC0tZm9yY2UgLS1kZWVwIC0tc2lnbiAtIFwiJHtmaWxlUGF0aH1cImA7XG5cdGNvbnNvbGUubG9nKFwiSW52b2tpbmcgY29tbWFuZDpcIiwgc2lnbkNtZCk7XG5cdGlmKCFkcnlSdW4pXG5cdFx0YXdhaXQgcHJvbWlzaWZ5KGV4ZWMpKHNpZ25DbWQpO1xufVxuIl19