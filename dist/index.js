"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signFile = exports.patchFile = void 0;
const child_process_1 = require("child_process");
const util_1 = require("util");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const regexes_1 = __importDefault(require("./regexes"));
const routines_1 = require("./routines");
async function patchFile(filePath, dryRun, inPlace) {
    let patchedFilePath = path_1.resolve(path_1.dirname(filePath), path_1.basename(filePath, path_1.extname(filePath)) + ".patched" + path_1.extname(filePath));
    if (inPlace)
        patchedFilePath = filePath;
    let buffer = Object(await promises_1.readFile(filePath, "binary"));
    let matchCount = 0;
    let patchOccurred = false;
    console.log("Searching and replacing for instruction __mkl_serv_intel_cpu_true...");
    [buffer, matchCount] = routines_1.replaceAll(buffer, regexes_1.default.__mkl_serv_intel_cpu_true.find, regexes_1.default.__mkl_serv_intel_cpu_true.replace);
    if (matchCount)
        patchOccurred = true;
    console.log("Searching and replacing for instructions __intel_fast_memset.A and __intel_fast_memcpy.A...");
    [buffer, matchCount] = routines_1.replaceAll(buffer, regexes_1.default.__intel_fast_memset_or_memcpy_A.find, regexes_1.default.__intel_fast_memset_or_memcpy_A.replace);
    if (patchOccurred || matchCount)
        patchOccurred = true;
    if (patchOccurred) {
        console.log("Writing resulting file...");
        if (!dryRun)
            await promises_1.writeFile(patchedFilePath, buffer, "binary");
        const xattrCmd = `xattr -cr "${patchedFilePath}"`;
        console.log("Invoking command:", xattrCmd);
        if (!dryRun)
            await util_1.promisify(child_process_1.exec)(xattrCmd);
        return patchedFilePath;
    }
    return null;
}
exports.patchFile = patchFile;
async function signFile(filePath, dryRun) {
    const signCmd = `codesign --force --deep --sign - "${filePath}"`;
    console.log("Invoking command:", signCmd);
    if (!dryRun)
        await util_1.promisify(child_process_1.exec)(signCmd);
}
exports.signFile = signFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaURBQXFDO0FBQ3JDLCtCQUFpQztBQUNqQywwQ0FBa0Q7QUFDbEQsK0JBQTJEO0FBQzNELHdEQUFnQztBQUNoQyx5Q0FBd0M7QUFFakMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxRQUFnQixFQUFFLE1BQWUsRUFBRSxPQUFnQjtJQUNsRixJQUFJLGVBQWUsR0FBRyxjQUFPLENBQUMsY0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGVBQVEsQ0FBQyxRQUFRLEVBQUUsY0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsVUFBVSxHQUFHLGNBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3pILElBQUcsT0FBTztRQUNULGVBQWUsR0FBRyxRQUFRLENBQUM7SUFFNUIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sbUJBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4RCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDbkIsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBRzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0VBQXNFLENBQUMsQ0FBQztJQUNwRixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsR0FBRyxxQkFBVSxDQUNoQyxNQUFNLEVBQ04saUJBQU8sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLEVBQ3RDLGlCQUFPLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUN6QyxDQUFDO0lBQ0YsSUFBRyxVQUFVO1FBQUUsYUFBYSxHQUFHLElBQUksQ0FBQztJQUVwQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZGQUE2RixDQUFDLENBQUM7SUFDM0csQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcscUJBQVUsQ0FDaEMsTUFBTSxFQUNOLGlCQUFPLENBQUMsK0JBQStCLENBQUMsSUFBSSxFQUM1QyxpQkFBTyxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FDL0MsQ0FBQztJQUNGLElBQUcsYUFBYSxJQUFJLFVBQVU7UUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBRXJELElBQUcsYUFBYSxFQUFDO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsTUFBTTtZQUNWLE1BQU0sb0JBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXBELE1BQU0sUUFBUSxHQUFHLGNBQWMsZUFBZSxHQUFHLENBQUM7UUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTTtZQUNWLE1BQU0sZ0JBQVMsQ0FBQyxvQkFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakMsT0FBTyxlQUFlLENBQUM7S0FDdkI7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUF4Q0QsOEJBd0NDO0FBRU0sS0FBSyxVQUFVLFFBQVEsQ0FBQyxRQUFnQixFQUFFLE1BQWU7SUFDL0QsTUFBTSxPQUFPLEdBQUcscUNBQXFDLFFBQVEsR0FBRyxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUMsSUFBRyxDQUFDLE1BQU07UUFDVCxNQUFNLGdCQUFTLENBQUMsb0JBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFMRCw0QkFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcInV0aWxcIjtcbmltcG9ydCB7IHJlYWRGaWxlLCB3cml0ZUZpbGUgfSBmcm9tIFwiZnMvcHJvbWlzZXNcIjtcbmltcG9ydCB7IGJhc2VuYW1lLCBkaXJuYW1lLCBleHRuYW1lLCByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCByZWdleGVzIGZyb20gXCIuL3JlZ2V4ZXNcIjtcbmltcG9ydCB7IHJlcGxhY2VBbGwgfSBmcm9tIFwiLi9yb3V0aW5lc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGF0Y2hGaWxlKGZpbGVQYXRoOiBzdHJpbmcsIGRyeVJ1bjogYm9vbGVhbiwgaW5QbGFjZTogYm9vbGVhbik6IFByb21pc2U8c3RyaW5nfG51bGw+IHtcblx0bGV0IHBhdGNoZWRGaWxlUGF0aCA9IHJlc29sdmUoZGlybmFtZShmaWxlUGF0aCksIGJhc2VuYW1lKGZpbGVQYXRoLCBleHRuYW1lKGZpbGVQYXRoKSkgKyBcIi5wYXRjaGVkXCIgKyBleHRuYW1lKGZpbGVQYXRoKSk7XG5cdGlmKGluUGxhY2UpXG5cdFx0cGF0Y2hlZEZpbGVQYXRoID0gZmlsZVBhdGg7XG5cblx0bGV0IGJ1ZmZlciA9IE9iamVjdChhd2FpdCByZWFkRmlsZShmaWxlUGF0aCwgXCJiaW5hcnlcIikpO1xuXHRsZXQgbWF0Y2hDb3VudCA9IDA7XG5cdGxldCBwYXRjaE9jY3VycmVkID0gZmFsc2U7XG5cblxuXHRjb25zb2xlLmxvZyhcIlNlYXJjaGluZyBhbmQgcmVwbGFjaW5nIGZvciBpbnN0cnVjdGlvbiBfX21rbF9zZXJ2X2ludGVsX2NwdV90cnVlLi4uXCIpO1xuXHRbYnVmZmVyLCBtYXRjaENvdW50XSA9IHJlcGxhY2VBbGwoXG5cdFx0YnVmZmVyLFxuXHRcdHJlZ2V4ZXMuX19ta2xfc2Vydl9pbnRlbF9jcHVfdHJ1ZS5maW5kLFxuXHRcdHJlZ2V4ZXMuX19ta2xfc2Vydl9pbnRlbF9jcHVfdHJ1ZS5yZXBsYWNlXG5cdCk7XG5cdGlmKG1hdGNoQ291bnQpIHBhdGNoT2NjdXJyZWQgPSB0cnVlO1xuXG5cdGNvbnNvbGUubG9nKFwiU2VhcmNoaW5nIGFuZCByZXBsYWNpbmcgZm9yIGluc3RydWN0aW9ucyBfX2ludGVsX2Zhc3RfbWVtc2V0LkEgYW5kIF9faW50ZWxfZmFzdF9tZW1jcHkuQS4uLlwiKTtcblx0W2J1ZmZlciwgbWF0Y2hDb3VudF0gPSByZXBsYWNlQWxsKFxuXHRcdGJ1ZmZlcixcblx0XHRyZWdleGVzLl9faW50ZWxfZmFzdF9tZW1zZXRfb3JfbWVtY3B5X0EuZmluZCxcblx0XHRyZWdleGVzLl9faW50ZWxfZmFzdF9tZW1zZXRfb3JfbWVtY3B5X0EucmVwbGFjZVxuXHQpO1xuXHRpZihwYXRjaE9jY3VycmVkIHx8IG1hdGNoQ291bnQpIHBhdGNoT2NjdXJyZWQgPSB0cnVlO1xuXG5cdGlmKHBhdGNoT2NjdXJyZWQpe1xuXHRcdGNvbnNvbGUubG9nKFwiV3JpdGluZyByZXN1bHRpbmcgZmlsZS4uLlwiKTtcblx0XHRpZiAoIWRyeVJ1bilcblx0XHRcdGF3YWl0IHdyaXRlRmlsZShwYXRjaGVkRmlsZVBhdGgsIGJ1ZmZlciwgXCJiaW5hcnlcIik7XG5cblx0XHRjb25zdCB4YXR0ckNtZCA9IGB4YXR0ciAtY3IgXCIke3BhdGNoZWRGaWxlUGF0aH1cImA7XG5cdFx0Y29uc29sZS5sb2coXCJJbnZva2luZyBjb21tYW5kOlwiLCB4YXR0ckNtZCk7XG5cdFx0aWYgKCFkcnlSdW4pXG5cdFx0XHRhd2FpdCBwcm9taXNpZnkoZXhlYykoeGF0dHJDbWQpO1xuXG5cdFx0cmV0dXJuIHBhdGNoZWRGaWxlUGF0aDtcblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkZpbGUoZmlsZVBhdGg6IHN0cmluZywgZHJ5UnVuOiBib29sZWFuKXtcblx0Y29uc3Qgc2lnbkNtZCA9IGBjb2Rlc2lnbiAtLWZvcmNlIC0tZGVlcCAtLXNpZ24gLSBcIiR7ZmlsZVBhdGh9XCJgO1xuXHRjb25zb2xlLmxvZyhcIkludm9raW5nIGNvbW1hbmQ6XCIsIHNpZ25DbWQpO1xuXHRpZighZHJ5UnVuKVxuXHRcdGF3YWl0IHByb21pc2lmeShleGVjKShzaWduQ21kKTtcbn1cbiJdfQ==